import fs from 'fs'
import path from 'path'
import os from 'os'
import { createHash } from 'crypto'

const distDir = 'dist'
const matrix = {
  darwin: ['x64', 'arm64'],
  linux: ['x64', 'arm64'],
}

const filename = ({ os, arch, version }) => `preevy-v${version}-${os}-${arch}.tar.gz`
const url = ({ os, arch, version }) => `https://github.com/livecycle/preevy/releases/download/v${version}/${filename({ os, arch, version })}`

const template = ctx => `# This file is automatically generated by https://github.com/livecycle/preevy/blob/main/packages/cli/scripts/homebrew.mjs
# Do not update this file directly; Please update the template instead
class Preevy < Formula
  desc "Quickly deploy preview environments to your cloud provider or Kubernetes cluster"
  homepage "https://preevy.dev"
  url "${ ctx.darwin.x64.url }"
  sha256 "${ ctx.darwin.x64.sha }"
  license "Apache-2.0"
  version "${ ctx.version }"

  on_macos do
    on_arm do
      url "${ ctx.darwin.arm64.url }"
      sha256 "${ ctx.darwin.arm64.sha }"
    end
  end

  on_linux do
    url "${ ctx.linux.x64.url }"
    sha256 "${ ctx.linux.x64.sha }"
    on_arm do
      url "${ ctx.linux.arm64.url }"
      sha256 "${ ctx.linux.arm64.sha }"
    end
  end

  def install
    inreplace "bin/preevy", /^CLIENT_HOME=/, "export PREEVY_OCLIF_CLIENT_HOME=#{lib/"client"}\nCLIENT_HOME="
    libexec.install Dir["*"]
    bin.install_symlink libexec/"bin/preevy"
  end

  test do
    system bin/"preevy", "version"
  end
end
`

const calcSha256 = async (filename) => new Promise((resolve, reject) => {
  const hash = createHash('sha256')
  const stream = fs.createReadStream(filename)
  stream.on('error', reject)
  stream.on('data', chunk => hash.update(chunk))
  stream.on('end', () => resolve(hash.digest('hex')))
})

const readVersion = async () => JSON.parse(await fs.promises.readFile('package.json', 'utf8')).version

const main = async () => {
  const version = await readVersion()
  if (!version) {
    throw new Error('Version not found in package.json')
  }
  const context = { version }
  await Promise.all(Object.entries(matrix).map(async ([os, archs]) => {
    context[os] ||= {}
    await Promise.all(archs.map(async arch => {
      const f = filename({ os, arch, version })
      const sha = await calcSha256(path.join(distDir, f)).catch(err => {
        throw new Error(`Failed to calculate SHA256 for ${f}: ${err.message}`)
      })
      context[os][arch] = {
        sha: sha,
        url: url({ os, arch, version }),
      }
    }))
  }))
  process.stdout.write(template(context))
  process.stdout.write(os.EOL)
}

main().catch(err => {
  console.error(err)
  process.exit(1)
})


